%{
#include <iostream>
#include <iostream>
#include <cstdlib>
#include <cstring>
#include <string.h>
#include <stdio.h>
#include <math.h>
using namespace std;

extern FILE *yyin;
int yylex();
int yyparse();
void yyerror(const char *p) { 
if (yylex()==0) {
        exit(0);
    } else{
	cerr << "Error: " << p << endl; exit(1);				      
}
 }
int currentLineNumber=0; 
%}

%union {
    int num;
    char* str;
    const char* temp;
}

%start prog


%token LPAREN RPAREN PLUS MINUS TIMES DIVIDE EQ LT GT
%token <num> NUMBER
%token <str> LineNum 

%type <str> prog_line 
%type <temp> equality_or_inequality
%type <num> expression term factor

%left LPAREN RPAREN
%left TIMES DIVIDE
%left PLUS MINUS
%left EQ LT GT

%%

prog : /* empty */
     | prog prog_line 
     ;

prog_line : LineNum equality_or_inequality  {
	if(currentLineNumber!=1)
{
        cout << $1 << " " << $2 << endl;
}
currentLineNumber=0;	
	  
}
 ;

equality_or_inequality : expression EQ expression {
    $$ = ($1 == $3) ? "Yes" : "No";
}
    
     | expression LT expression {
    $$ = ($1 < $3) ? "Yes" : "No";

}
     | expression GT expression {
    $$ = ($1 > $3) ? "Yes" : "No";

}
     ;

expression : expression PLUS term   { $$ = $1 + $3; }
     | expression MINUS term        { $$ = $1 - $3; }
     | MINUS term		    {$$= -$2;}
     | term                        { $$ = $1; }
     ;

term : term TIMES factor           { $$ = $1 * $3; }
     | term DIVIDE factor          { if ($3 != 0) $$ = $1 / $3;
                                   else {
				       currentLineNumber=1;
                                       cerr << "Error: Division By Zero." << endl;

                                   }
                                 }
     | factor                      { $$ = $1; }
     ;

factor : LPAREN expression RPAREN { $$ = $2; }
       | NUMBER                    { $$ = $1; 
       ;
}

%%
int main() {
    yyin=stdin;	
    yyparse(); // A parsing function that will be generated by Bison.
    return 0;
}                                                  